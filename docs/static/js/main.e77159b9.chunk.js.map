{"version":3,"sources":["services/api.js","components/CharacterCard.js","images/BG2.jpg","components/NotFound.js","components/CharacterList.js","images/PickleRick.png","components/CharacterDetail.js","components/FilterByName.js","components/FilterBySpecies.js","components/FilterByStatus.js","components/Filters.js","images/logo1.png","components/Header.js","components/App.js","index.js"],"names":["getDataFromApi","fetch","then","response","json","data","results","map","character","id","image","name","species","gender","origin","status","episodes","episode","length","CharacterCard","props","to","info","className","src","alt","NotFound","parasites","CharacterList","characterData","characters","sort","a","b","eachCharacter","CharacterDetail","undefined","selectedCharacter","PickleRick","FilterByName","htmlFor","type","value","onChange","ev","handleFilter","key","target","FilterBySpecies","FilterByStatus","handleChange","statusList","statusOptions","eachStatus","i","checked","includes","Filters","onSubmit","preventDefault","onClick","resetButton","Header","logo","App","useState","setCharacters","setName","setSpecies","setStatus","useEffect","filteredCharacters","filter","toLowerCase","exact","path","inputChange","indexStatus","indexOf","newStatus","splice","Set","getStatus","render","parseInt","match","params","find","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e77159b9.chunk.js","sourcesContent":["const getDataFromApi = () => {\r\n  return fetch(\"https://rickandmortyapi.com/api/character/\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.results.map((character) => {\r\n        return {\r\n          id: character.id,\r\n          image: character.image,\r\n          name: character.name,\r\n          species: character.species,\r\n          gender: character.gender,\r\n          origin: character.origin.name,\r\n          status: character.status,\r\n          episodes: character.episode.length,\r\n        };\r\n      });\r\n    });\r\n};\r\nexport default getDataFromApi;\r\n","import { Link } from \"react-router-dom\";\r\nimport \"../stylesheets/characterCard.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction CharacterCard(props) {\r\n  // this funtion goes through the characters' status and gives it an icon according to it\r\n  const statusIcon = () => {\r\n    if (props.info.status === \"Dead\") {\r\n      return <i className=\"fas fa-skull-crossbones\"></i>;\r\n    } else if (props.info.status === \"unknown\") {\r\n      return <i className=\"fas fa-question\"></i>;\r\n    } else {\r\n      return <i className=\"fas fa-heartbeat\"></i>;\r\n    }\r\n  };\r\n  const speciesIcon = () => {\r\n    // same as previous function, but with the type of species\r\n    return props.info.species === \"Alien\" ? (\r\n      <i className=\"fas fa-pastafarianism\"></i>\r\n    ) : (\r\n      <i className=\"fas fa-user\"></i>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Link to={`/character/${props.info.id}`}>\r\n        <img\r\n          className=\"cardList__eachCard--img\"\r\n          src={props.info.image}\r\n          alt={props.info.name}\r\n        />\r\n        <h3 className=\"cardList__eachCard--name\">{props.info.name}</h3>\r\n        <h4 className=\"cardList__eachCard--species\">{props.info.species}</h4>\r\n        <span className=\"cardList__eachCard--icon\">{statusIcon()}</span>\r\n        <span className=\"cardList__eachCard--icon\">{speciesIcon()}</span>\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\nCharacterCard.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    name: PropTypes.string,\r\n    species: PropTypes.string,\r\n    id: PropTypes.number,\r\n  }),\r\n};\r\n\r\nexport default CharacterCard;\r\n","export default __webpack_public_path__ + \"static/media/BG2.70c869fb.jpg\";","import parasites from \"../images/BG2.jpg\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <li className=\"cardList__notFound\">\r\n      Not a character, it's a parasite!{\" \"}\r\n      <img\r\n        className=\"cardList__notFound--parasite\"\r\n        src={parasites}\r\n        alt=\"this character does not exist\"\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import CharacterCard from \"./CharacterCard\";\r\nimport \"../stylesheets/characterList.scss\";\r\nimport PropTypes from \"prop-types\";\r\nimport NotFound from \"./NotFound\";\r\n\r\nconst CharacterList = (props) => {\r\n  // To sort them by name, it gets the index, so you need to specify the data you want to sort it by.\r\n  const sortedList = props.characters.sort((a, b) =>\r\n    a.name > b.name ? 1 : a.name < b.name ? -1 : 0\r\n  );\r\n\r\n  const characterData = sortedList.map((eachCharacter) => {\r\n    return (\r\n      <li key={eachCharacter.id} className=\"cardList__eachCard\">\r\n        <CharacterCard info={eachCharacter} />\r\n      </li>\r\n      // Since characterData is an array, we have to do a ternary conditional below and set length>0 so it renders the list\r\n    );\r\n  });\r\n  return (\r\n    <ul className=\"cardList\">\r\n      {characterData.length > 0 ? characterData : <NotFound />}\r\n    </ul>\r\n  );\r\n};\r\n\r\nCharacterList.propTypes = {\r\n  filteredCharacters: PropTypes.shape({\r\n    id: PropTypes.number,\r\n  }),\r\n};\r\n\r\nexport default CharacterList;\r\n","export default __webpack_public_path__ + \"static/media/PickleRick.a3c086f5.png\";","import { Link } from \"react-router-dom\";\r\nimport PickleRick from \"../images/PickleRick.png\";\r\nimport \"../stylesheets/characterDetail.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction CharacterDetail(props) {\r\n  //if the input name does  not correspond to any of the names on the list from the information we get from the API, it returns an error message\r\n  if (props.selectedCharacter === undefined) {\r\n    return (\r\n      <>\r\n        {\" \"}\r\n        <button className=\"linkButton\">\r\n          <Link className=\"link\" to=\"/\">\r\n            Home\r\n          </Link>\r\n        </button>\r\n        <div className=\"pickleContainer\">\r\n          <p className=\"pickleContainer__message\">404 error URL not found</p>\r\n          <img\r\n            className=\"pickleContainer__img\"\r\n            src={PickleRick}\r\n            alt=\"character not found\"\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    // here we render the card with more details about the selected character\r\n    return (\r\n      <>\r\n        <button className=\"linkButton\">\r\n          <Link className=\"link\" to=\"/\">\r\n            {\" \"}\r\n            Home{\" \"}\r\n          </Link>\r\n        </button>\r\n        <section className=\"details\">\r\n          <img\r\n            className=\"details__img\"\r\n            src={props.selectedCharacter.image}\r\n            alt={props.selectedCharacter.name}\r\n          />\r\n          <ul className=\"details__list\">\r\n            <li className=\"details__list--data\">\r\n              Name:{\" \"}\r\n              <span className=\"description\">\r\n                {\" \"}\r\n                {props.selectedCharacter.name}\r\n              </span>\r\n            </li>\r\n            <li className=\"details__list--data\">\r\n              Gender:{\" \"}\r\n              <span className=\"description\">\r\n                {props.selectedCharacter.gender}\r\n              </span>\r\n            </li>\r\n            <li className=\"details__list--data\">\r\n              Species:{\" \"}\r\n              <span className=\"description\">\r\n                {props.selectedCharacter.species}\r\n              </span>\r\n            </li>\r\n            <li className=\"details__list--data\">\r\n              Origin:{\" \"}\r\n              <span className=\"description\">\r\n                {props.selectedCharacter.origin}\r\n              </span>\r\n            </li>\r\n            <li className=\"details__list--data\">\r\n              Number of episodes featured:{\" \"}\r\n              <span className=\"description\">\r\n                {props.selectedCharacter.episodes}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\nCharacterDetail.propTypes = {\r\n  selecterCharacter: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    name: PropTypes.string,\r\n    species: PropTypes.string,\r\n    id: PropTypes.number,\r\n    gender: PropTypes.string,\r\n    origin: PropTypes.string,\r\n    episodes: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default CharacterDetail;\r\n","import \"../stylesheets/filterByName.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FilterByName = (props) => {\r\n  // listener to get the value and the key of the input\r\n  const handleChange = (ev) => {\r\n    props.handleFilter({\r\n      key: \"name\",\r\n      value: ev.target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className=\"filters__form--nameTitle\" htmlFor=\"name\">\r\n        Filter by name:\r\n      </label>\r\n      <input\r\n        className=\"filters__form--nameInput\"\r\n        name=\"name\"\r\n        type=\"text\"\r\n        value={props.name}\r\n        id=\"name\"\r\n        onChange={handleChange}\r\n      />\r\n    </>\r\n  );\r\n};\r\nFilterByName.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\nexport default FilterByName;\r\n","import \"../stylesheets/filterBySpecies.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FilterBySpecies = (props) => {\r\n  // this funtion lifts the key and the value of the status checkbox\r\n  const handleChange = (ev) => {\r\n    props.handleFilter({\r\n      key: \"species\",\r\n      value: ev.target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className=\"filters__form--speciesTitle\" htmlFor=\"species\">\r\n        Filter by species:\r\n      </label>\r\n      <select\r\n        className=\"filters__form--speciesInput\"\r\n        name=\"species\"\r\n        id=\"species\"\r\n        value={props.species}\r\n        onChange={handleChange}\r\n      >\r\n        <option value=\"All\">All</option>\r\n        <option value=\"Human\">Human</option>\r\n        <option value=\"Alien\">Alien</option>\r\n      </select>\r\n    </>\r\n  );\r\n};\r\nFilterBySpecies.propTypes = {\r\n  species: PropTypes.string,\r\n};\r\nexport default FilterBySpecies;\r\n","import \"../stylesheets/filterByStatus.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FilterByStatus = (props) => {\r\n  // this funtion lifts the key and the value of the status checkbox\r\n  const handleChange = (ev) => {\r\n    props.handleFilter({\r\n      key: \"status\",\r\n      value: ev.target.value,\r\n    });\r\n  };\r\n  // we go through the array which has a lifting method and we return a label and an input checkbox for each element of the array\r\n  const statusList = props.statusOptions.map((eachStatus, i) => {\r\n    return (\r\n      <label key={i} className=\"filters__form--statusSubtitle\">\r\n        <input\r\n          className=\"filters__form--box\"\r\n          type=\"checkbox\"\r\n          name=\"status\"\r\n          value={eachStatus}\r\n          checked={props.status.includes(eachStatus)}\r\n          onChange={handleChange}\r\n        />\r\n        {eachStatus}\r\n      </label>\r\n    );\r\n  });\r\n  return (\r\n    <>\r\n      {/* here we render a label and the list with all the labels and inputs from the statusList */}\r\n      <legend className=\"checkboxWrapper\">\r\n        <label className=\"filters__form--statusTitle\" htmlFor=\"status\">\r\n          Status:\r\n        </label>\r\n        {statusList}\r\n      </legend>\r\n    </>\r\n  );\r\n};\r\n\r\nFilterByStatus.propTypes = {\r\n  status: PropTypes.array,\r\n};\r\nexport default FilterByStatus;\r\n","import FilterByName from \"./FilterByName\";\r\nimport FilterBySpecies from \"./FilterBySpecies\";\r\nimport \"../stylesheets/filters.scss\";\r\nimport PropTypes from \"prop-types\";\r\nimport FilterByStatus from \"./FilterByStatus\";\r\n\r\nconst Filters = (props) => {\r\n  const handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n  };\r\n  const handleClick = () => {\r\n    props.resetButton();\r\n  };\r\n\r\n  return (\r\n    <section className=\"filters\">\r\n      <form className=\"filters__form\" onSubmit={handleSubmit}>\r\n        <FilterByName handleFilter={props.handleFilter} name={props.name} />\r\n        <FilterBySpecies\r\n          handleFilter={props.handleFilter}\r\n          species={props.species}\r\n        />\r\n        <FilterByStatus\r\n          handleFilter={props.handleFilter}\r\n          status={props.status}\r\n          statusOptions={props.statusOptions}\r\n        />\r\n        <button className=\"resetButton\" value=\"reset\" onClick={handleClick}>\r\n          <i className=\"fas fa-undo-alt\"></i>\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\nFilters.propTypes = {\r\n  name: PropTypes.string,\r\n  species: PropTypes.string,\r\n};\r\nexport default Filters;\r\n","export default __webpack_public_path__ + \"static/media/logo1.ee0728d3.png\";","import { Link } from \"react-router-dom\";\r\nimport logo from \"../images/logo1.png\";\r\nimport \"../stylesheets/header.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <Link to=\"/\">\r\n          <img className=\"header__logo\" src={logo} alt=\"Rick and Morty logo\" />\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport getDataFromApi from \"../services/api\";\nimport CharacterList from \"./CharacterList\";\nimport CharacterDetail from \"./CharacterDetail\";\nimport Filters from \"./Filters\";\nimport Header from \"./Header\";\nimport \"../stylesheets/App.scss\";\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [species, setSpecies] = useState(\"All\");\n  const [status, setStatus] = useState([]);\n\n  useEffect(() => {\n    getDataFromApi().then((data) => setCharacters(data));\n  }, []);\n  // This function registers the changes on all the inputs and updates their state\n  const handleFilter = (inputChange) => {\n    if (inputChange.key === \"name\") {\n      setName(inputChange.value);\n    } else if (inputChange.key === \"species\") {\n      setSpecies(inputChange.value);\n    } else if (inputChange.key === \"status\") {\n      // we do this so we can go through the array so we can get the index and check whether it is already on the array or not.\n      const indexStatus = status.indexOf(inputChange.value);\n      if (indexStatus === -1) {\n        const newStatus = [...status, inputChange.value];\n        setStatus(newStatus);\n      } else {\n        // We create a new array so we can use a splice method on it. We do this, so we can remove the elements that are already in the array. Then we save this  new array on the 'status' state.\n        const newStatus = [...status];\n        newStatus.splice(indexStatus, 1);\n        setStatus(newStatus);\n      }\n    }\n  };\n  // apply filters functionality to inputs\n  const filteredCharacters = characters\n    .filter((character) => {\n      return character.name.toLowerCase().includes(name.toLowerCase());\n    })\n    .filter((character) => {\n      return species === \"All\" ? true : character.species === species;\n    })\n    .filter((character) => {\n      return status.length === 0 ? true : status.includes(character.status);\n    });\n  // this funtion is to avoids rendering every status from every character on the checkbox options\n  const getStatus = () => {\n    const status = characters.map((character) => character.status);\n    return [...new Set(status)];\n  };\n  const reset = () => {\n    setCharacters(characters);\n    setName(\"\");\n    setSpecies(\"All\");\n    setStatus([]);\n  };\n  const renderDetail = (props) => {\n    const id = parseInt(props.match.params.id);\n    const selectedCharacter = characters.find((character) => {\n      return character.id === id;\n    });\n\n    return <CharacterDetail selectedCharacter={selectedCharacter} />;\n  };\n  return (\n    <div className=\"page\">\n      <div className=\"layer\">\n        <Header />\n        <main className=\"main\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Filters\n                name={name}\n                species={species}\n                handleFilter={handleFilter}\n                statusOptions={getStatus()}\n                status={status}\n                resetButton={reset}\n              />\n              <CharacterList characters={filteredCharacters} />\n            </Route>\n            {/* This dynamic route let us share links and paste then in browsers */}\n            <Route path=\"/character/:id\" render={renderDetail} />\n          </Switch>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./stylesheets/index.scss\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}